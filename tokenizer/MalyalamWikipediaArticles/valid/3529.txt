
ഒരു ലിസ്റ്റിലെ സംഖ്യകളെയും മറ്റും ക്രമത്തിലാക്കാൻ ഉപയോഗിക്കുന്ന ഒരു സോർട്ടിങ്ങ് അൽഗൊരിതമാണ്‌ ബബിൾ സോർട്ട്. എളുപ്പമുള്ളതും, എന്നാൽ ഗണനപരമായ സങ്കീർണ്ണത കൂടിയതിനാൽ വളരെ സമയമെടുക്കുന്നതുമായ ഒരു സോർട്ടിങ്ങ് അൽഗൊരിതമാണിത്. ഇതിന്റെ സമയസങ്കീർണ്ണത   O  {\displaystyle O} ഉം മെമ്മറി സങ്കീർണ്ണത   O  {\displaystyle O} ഉമാണ്‌. എന്നാൽ ഒരു in-place അൽഗൊരിതമാണ്‌ ഇത് എന്നതിനാൽ ലിസ്റ്റിന്‌ പുറമെ O മെമ്മറി മാത്രമേ ഇതിന്‌ ആവശ്യമുള്ളൂ.
ക്രമത്തിലല്ലാതെയുള്ള അടുത്തടുത്തുള്ള സംഖ്യകളെ പരസ്പരം മാറ്റുന്നതു വഴിയാണ്‌ ബബിൾ സോർട്ട് സംഖ്യകളെ ക്രമീകരിക്കുന്നത്. ക്രമീകരിക്കപ്പെട്ട സംഖ്യകൾ കുമിളകളെപ്പോലെ ലിസ്റ്റിന്റെ ഒരു ഭാഗത്തേക്കു പോകുന്നു എന്നതിനാലാണ്‌ ഈ അൽഗൊരിതത്തിന്‌ പേര്‌ ലഭിച്ചത്. സംഖ്യകളെ താരതമ്യം ചെയ്യുക വഴിയാണ്‌ സോർട്ടിങ്ങ് നടത്തുന്നത് എന്നതിനാൽ ഇത് ഒരു താരതമ്യ സോർട്ട് ആണ്‌.
 മുതൽ വരെയുള്ള സംഖ്യാദ്വയങ്ങളെ പരിഗണിക്കുക. ഒരു ദ്വയം ക്രമത്തിലല്ലെങ്കിൽ ആ രണ്ട് സംഖ്യകളെ പരസ്പരം മാറ്റുക. ഇങ്ങനെ ചെയ്യുന്നതു വഴി ഏറ്റവും വലിയ സംഖ്യ ലിസ്റ്റിന്റെ ഏറ്റവും അവസാനമായി മാറും. ഇതിനുശേഷം ഈ പ്രക്രിയ ലിസ്റ്റിലെ ആദ്യത്തെ N-1, N-2....2 സംഖ്യകൾക്ക് തുടർന്നാൽ ലിസ്റ്റിലെ സംഖ്യകളെല്ലാം ക്രമത്തിലാകും
N സംഖ്യകളുള്ള array എന്ന ലിസ്റ്റ് ബബിൾ സോർട്ട് വഴി ക്രമത്തിലാക്കാൻ:
സംഖ്യകൾ തികച്ചും വിപരീതക്രമത്തിലാകുമ്പോൾ    N   2   {\displaystyle {\frac {N\left}{2}}} തവണ പടി 6 ചെയ്യേണ്ടി വരുന്നു എന്നതിനാൽ ബബിൾ സോർട്ടിന്റെ മോശം സമയസങ്കീർണ്ണത   O  {\displaystyle O} ആണ്‌. സംഖ്യകൾ തികച്ചും ക്രമത്തിലാകുമ്പോൾ ഇത്   N − 1  {\displaystyle N-1} തവണ മാത്രം ചെയ്താൽ മതി. അതിനാൽ നല്ല സമയസങ്കീർണ്ണത   O  {\displaystyle O} ആണ്‌. ശരാശരി സമയസങ്കീർണ്ണത   O  {\displaystyle O} തന്നെ. ശരാശരി, മോശം സമയസങ്കീർണ്ണതകൾ   O  {\displaystyle O} ആയുള്ള സോർട്ടിങ്ങ് അൽഗൊരിതങ്ങൾ ഉണ്ട്.   O  {\displaystyle O} സമയസങ്കീർണ്ണത ഉള്ള ഇൻസർഷൻ സോർട്ട് മുതലായ അൽഗൊരിതങ്ങളും ബബിൾ സോർട്ടിനെക്കാൾ വേഗത്തിൽ സോർട്ടിങ്ങ് നടത്തുന്നു എന്നതിനാൽ വലിയ ലിസ്റ്റുകൾ സോർട്ട് ചെയ്യാൻ ബബിൾ സോർട്ട് ഉപയോഗിക്കാറില്ല.
പരിശീലനക്കുറിപ്പുകൾ Algorithm implementation എന്ന താളിൽ ലഭ്യമാണ്
